{
  "TimeSeries": {
    "algorithm": {
      "title": "Time Series",
      "name": "time_series",
      "instance": "timeSeriesAlgorithm",
      "method": "POST",
      "endpoint": [
        "DAMUrl",
        "/library/TimeSeries.OBeu/R/open_spending.ts"
      ],
      "prompt": "Select an aggregate, a time-related drilldown and the prediction steps parameter from the left and click on the execute button on top right."
    },

    "input": {
      "raw_data": {
        "cardinality": "1",
        "type": "BABBAGE_AGGREGATE_URI",
        "name": "json_data",
        "title": "Data coming from an aggregation",
        "guess": false,
        "required": true
      },
      "time_dimension": {
        "cardinality": "1",
        "type": "ATTRIBUTE_REF",
        "name": "time",
        "title": "Time dimension",
        "guess": true,
        "required": true
      },
      "amount_aggregate": {
        "cardinality": "1",
        "type": "AGGREGATE_REF",
        "name": "amount",
        "title": "Amount aggregate",
        "guess": true,
        "required": true
      },
      "prediction_steps": {
        "cardinality": "1",
        "type": "PARAMETER",
        "name": "prediction_steps",
        "title": "Prediction Steps",
        "data_type": "number",
        "default_value": 4,
        "guess": false,
        "required": false
      }
    },
    "output": {
      "name": "output",
      "instance": "json_outout",
      "cardinality": "1",
      "type": "TABLE"
    }
  },
  "outlierDetection_LOF": {
    "algorithm": {
      "title": "outlier Detection based on Local Outlier Factor",
      "name": "do_outlier_detection_lof",
      "instance": "outlier_dm.detect_outliers_subpopulation_lattice",
      "method": "POST",
      "endpoint": [
        "DAMUrl",
        "/outlier_detection/LOF",
        "sample|real"
      ],
      "prompt": "select one or more files, to detect most isolated items (based on density)"
    },
    "input": {
      "description": "if the endpoint is '<DAMUrl>/outlier_detection/LOF/sample', no input is needed. The server uses '<DAMUrl>/Data/Kilkis_neu.csv' as input csv file. Following input is for '<DAMUrl>/outlier_detection/LOF/real'",
      "raw_data": {
        "cardinality": "1",
        "type": "turtle",
        "name": "filename",
        "title": "Select one or more files to identify anormal values",
        "guess": false,
        "required": true,
        "note": "all input filenames are concatenated by '+', starting with '+', e.g., '+budget-kilkis-expenditure-2012'or '+budget-kilkis-expenditure-2012+budget-kilkis-expenditure-2013' "
      },
      "output_file": {
        "cardinality": "1",
        "type": "string",
        "name": "output",
        "title": "Output File Name",
        "guess": false,
        "default": "Result",
        "required": false
      },
      "full_output": {
        "cardinality": "1",
        "type": "string",
        "name": "full_output",
        "title": "Whether full output",
        "guess": false,
        "default": "partial",
        "required": false
      }
    },
    "output": {
      "name": "output",
      "instance": "json_outout with 'filename' as the key",
      "cardinality": "1",
      "type": "CSV",
      "location": "<DAMUrl>/static/output"
    }
  }
}